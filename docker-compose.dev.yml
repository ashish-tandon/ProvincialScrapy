version: '3.8'

services:
  # NocoDB - Database and API
  nocodb:
    image: nocodb/nocodb:latest
    container_name: provincial-scrapy-nocodb-dev
    ports:
      - "8080:8080"
    environment:
      - NC_DISABLE_CACHE=true
      - NC_DATABASE_URL=sqlite:///nocodb.db
      - NC_AUTH_JWT_SECRET=your-jwt-secret-dev
    volumes:
      - ./nocodb_data:/usr/app/data/
    restart: unless-stopped
    networks:
      - provincial-network-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP Server for Firecrawl integration
  mcp-server:
    build:
      context: ./mcp-server
      dockerfile: Dockerfile
    container_name: provincial-scrapy-mcp-dev
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - FIRECRAWL_API_KEY=${FIRECRAWL_API_KEY:-demo-key}
      - NOCODB_URL=http://nocodb:8080
      - NOCODB_API_TOKEN=${NOCODB_API_TOKEN:-demo-token}
      - JWT_SECRET=dev-secret-key
      - REDIS_HOST=redis
    depends_on:
      - nocodb
      - redis
    restart: unless-stopped
    networks:
      - provincial-network-dev
    volumes:
      - ./mcp-server:/app
      - /app/node_modules
    command: npm run dev

  # Main Scraping Application
  scraper-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: provincial-scrapy-app-dev
    environment:
      - MCP_SERVER_URL=http://mcp-server:3001
      - NOCODB_URL=http://nocodb:8080
      - NOCODB_API_TOKEN=${NOCODB_API_TOKEN:-demo-token}
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=DEBUG
    depends_on:
      - nocodb
      - mcp-server
    restart: unless-stopped
    networks:
      - provincial-network-dev
    volumes:
      - ./src:/app/src
      - ./data:/app/data
    command: python src/unified_scraper.py --no-mcp --debug

  # Redis for caching and job queues
  redis:
    image: redis:7-alpine
    container_name: provincial-scrapy-redis-dev
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - provincial-network-dev
    volumes:
      - redis_data:/data

  # Frontend Development Server
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: provincial-scrapy-frontend-dev
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:3001/api
      - NODE_ENV=development
    depends_on:
      - mcp-server
    restart: unless-stopped
    networks:
      - provincial-network-dev
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next

  # Nginx reverse proxy (optional for development)
  nginx:
    image: nginx:alpine
    container_name: provincial-scrapy-nginx-dev
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - nocodb
      - mcp-server
      - frontend
    restart: unless-stopped
    networks:
      - provincial-network-dev

volumes:
  nocodb_data:
  redis_data:

networks:
  provincial-network-dev:
    driver: bridge